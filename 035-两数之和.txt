class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        multimap<int,int>temp;
        vector<int>res;
        for(int i=0;i<nums.size();i++)
            temp.insert(multimap<int,int>::value_type(nums[i],i));
        sort(nums.begin(),nums.end());
        int i=0; int j=nums.size()-1;
        while(i<j)
        {
            if(nums[i]+nums[j]==target)
            {
                if(temp.count(nums[i])>1)
                {
                res.push_back(temp.find(nums[i])->second);
                res.push_back((++temp.find(nums[i]))->second);
                    return res;
                }
                else
                {
                res.push_back(temp.find(nums[i])->second);
                res.push_back(temp.find(nums[j])->second);
                    return res;
                }
            }
            if(nums[i]+nums[j]<target)
                i++;
            if(nums[i]+nums[j]>target)
                j--;
        }
        return res;
            
    }
};//怎么说呢 也可以用map记录节点 然后搜索target-nums[i],这样就不用考虑有两个相同的数的情况，因为map的话会记录最新的下标值，而遍历的时候是从小的开始的