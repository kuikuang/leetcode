/*class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        if(nums.size()<2)
            return nums;
        vector<int>dp(nums.size()-1);
        vector<int>dp1(nums.size()-1);
        int index=0;
        dp[index++]=nums[0];
        for(int i=1;i<nums.size()-1;i++)
        {
            dp[index++]=dp[i-1]*nums[i];
        
        }
        index=0;
        dp1[index++]=nums[nums.size()-1];
        for(int i=nums.size()-2;i>0;i--)
        {
            dp1[index]=dp1[index-1]*nums[i];
            index++;
        }
           for(int i=0;i<nums.size();i++)
           {
               if(i==0)
               {  nums[i]=dp1.back();
                continue;
               }
               if(i==nums.size()-1)
               {
                   nums[i]=dp.back();
                   continue;
               }
               nums[i]=dp[i-1]*dp1[nums.size()-2-i];
           }
        for(int i=0;i<nums.size()-1;i++)
            cout<<dp[i]<<" "<<dp1[i]<<" sss";
        return nums;
        
        
    }
};*/ //渣渣的做法
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int i, len = nums.size();
        vector<int> res(len);
        int tmp = 1;
        res[0] = 1;
        for(i = 0; i < len - 1; ++i)
        {
            tmp *= nums[i];
            res[i + 1] = tmp;
        }
        tmp = 1;
        for(i = len - 2; i >= 0; --i)
        {
            tmp *= nums[i + 1];
            res[i] *= tmp;
        }

        return res;
    }
};//大神的做法 其实这两个做法的思想是相似的 但是我画蛇添足了